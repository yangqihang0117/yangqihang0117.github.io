<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yxx&#39;s Study Notes</title>
    <link>https://yangqihang0117.github.io/</link>
    <description>Recent content on Yxx&#39;s Study Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yangqihang0117.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[多线程设计模式]Master-Slave(主仆)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-master-slave/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-master-slave/</guid>
      
        <description>&lt;p&gt;  Master-Slave模式是一个基于&lt;strong&gt;分而治之&lt;/strong&gt;思想的设计模式。其核心思想是将一个任务(初始任务)分解成若干个语义等同的字任务，并由专门工作者线程来并行执行这些子任务。原始任务的处理结果是通过整合各个子任务的处理结果而形成的。而这些与分而治之相关的处理细节对于原始任务的提交方来说又是不可见的。因此，Master-Slave模式既提高了计算效率，又实现了数据隐藏。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Thread Specific Storage(线程特有存储)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-thread-specific-storage/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-thread-specific-storage/</guid>
      
        <description>&lt;p&gt;  与多线程相关的问题(如线程安全、死锁等)归根到底是多线程共享变量导致的。有鉴于此，&lt;strong&gt;Thread Specific Storage模式&lt;/strong&gt; 通过不共享变量实现了线程安全，并由此自然地避免了与锁相关的消耗及与之有关的问题。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Thread Pool(线程池)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-thread-pool/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-thread-pool/</guid>
      
        <description>&lt;p&gt;  一个系统中的线程相对于其所要处理的任务而言，总是一种非常有限的资源。线程不仅在其执行任务时需要消耗CPU时间和内存等资源，线程对象(&lt;code&gt;java.lang.Thread&lt;/code&gt;实例)本身以及线程所需的调用栈(Call Stack)也占用内存，而且在Java中创建一个线程往往意味着Java虚拟机会在其依赖的宿主机操作系统创建本地线程(Native Thread)。因此，为每一个(每一批)任务创建一个线程以供其执行通常是一件奢侈且不现实的事情&amp;hellip;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Active Object(主动对象)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-active-object/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-active-object/</guid>
      
        <description>&lt;p&gt;  &lt;strong&gt;Active Object模式&lt;/strong&gt;是一种异步编程模式。它通过对&lt;strong&gt;方法的调用(Method Invocation)&lt;/strong&gt;、 &lt;strong&gt;方法的执行(Method Execution)&lt;/strong&gt; 进行 &lt;strong&gt;解耦(Decoupling)&lt;/strong&gt; 来提高并发性。若以任务的概念来说，&lt;strong&gt;Active Object模式&lt;/strong&gt; 的核心是它允许任务的提交(相当于对异步方法的调用)和任务的执行(相当于异步方法的真正执行)分离。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Producer-Consumer(生产者/消费者)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-producer-consumer/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-producer-consumer/</guid>
      
        <description>&lt;p&gt;  &lt;strong&gt;Producer-Consumer模式&lt;/strong&gt;可以看成设计模式的设计模式。很多的多线程设计模式都可以看作&lt;strong&gt;Producer-Consumer模式&lt;/strong&gt;的一个实例。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Promise(承诺)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-promise/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-promise/</guid>
      
        <description>&lt;p&gt;  &lt;strong&gt;Promise模式&lt;/strong&gt;是一种编程模式。使得可以先开始一个任务的执行，并得到一个用于获取该任务执行结果的凭据对象，而不用等待该任务执行完毕就可以继续执行其他操作。当需要该任务的执行结果时，再调用凭据对象的相关方法来获取结果。这样避免了不必要的等待，增加了系统的并发行。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Two-phase Termination(两阶段终止)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-two-phase-termination/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-two-phase-termination/</guid>
      
        <description>&lt;p&gt;  有时我们希望提前结束线程，但安全可靠地停止线程是一件不那么简单的事情。首先Java没有提供直接的API用于停止线程(早已不提倡使用&lt;code&gt;java.lang.Thread&lt;/code&gt;类的&lt;em&gt;stop&lt;/em&gt;方法)。停止线程还有一些额外的细节需要考虑，如待停止的线程处于阻塞(如等待获得锁)或者等待(等待其他线程)状态、尚有未处理完毕的任务等。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Guarded Suspension(保护性暂挂)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-guarded-suspension/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-guarded-suspension/</guid>
      
        <description>&lt;p&gt;  为了提高并发性，往往将一个任务拆解为不同的部分，将其交由不同的线程执行。当这些线程间互相协作时，仍然可能会出现一个线程等待另一个线程完成一定的操作后其自身才能继续运行的情形。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>[多线程设计模式]Immutable Object(不可变对象)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-immutable-object/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-immutable-object/</guid>
      
        <description>&lt;p&gt;  在多线程共享的情况下，为保证数据一致性，往往需要对这些变量的访问进行加锁。而锁本身又会带来一些问题与开销。&lt;strong&gt;Immutable Object模式&lt;/strong&gt;使得我们可以在不使用锁的情况下，既保证共享变量的线程安全，又避免引入锁可能带来的问题与开销。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://yangqihang0117.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/about/</guid>
      
        <description> </description>
      
    </item>
    
  </channel>
</rss>