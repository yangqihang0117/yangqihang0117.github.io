<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yxx&#39;s Study Notes</title>
    <link>https://yangqihang0117.github.io/</link>
    <description>Recent content on Yxx&#39;s Study Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://yangqihang0117.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://yangqihang0117.github.io/about/</link>
      <pubDate>Wed, 21 Dec 2022 16:53:16 +0800</pubDate>
      
      <guid>https://yangqihang0117.github.io/about/</guid>
      
        <description> </description>
      
    </item>
    
    <item>
      <title>Two-phase Termination(两阶段终止)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-two-phase-termination/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-two-phase-termination/</guid>
      
        <description>&lt;p&gt;  有时我们希望提前结束线程，但安全可靠地停止线程是一件不那么简单的事情。首先Java没有提供直接的API用于停止线程(早已不提倡使用&lt;code&gt;java.lang.Thread&lt;/code&gt;类的&lt;em&gt;stop&lt;/em&gt;方法)。停止线程还有一些额外的细节需要考虑，如待停止的线程处于阻塞(如等待获得锁)或者等待(等待其他线程)状态、尚有未处理完毕的任务等。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Guarded Suspension(保护性暂挂)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-guarded-suspension/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-guarded-suspension/</guid>
      
        <description>&lt;p&gt;  为了提高并发性，往往将一个任务拆解为不同的部分，将其交由不同的线程执行。当这些线程间互相协作时，仍然可能会出现一个线程等待另一个线程完成一定的操作后其自身才能继续运行的情形。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Immutable Object(不可变对象)模式</title>
      <link>https://yangqihang0117.github.io/archive/multi-thread-patterns-immutable-object/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangqihang0117.github.io/archive/multi-thread-patterns-immutable-object/</guid>
      
        <description>&lt;p&gt;  在多线程共享的情况下，为保证数据一致性，往往需要对这些变量的访问进行加锁。而锁本身又会带来一些问题与开销。&lt;strong&gt;Immutable Object模式&lt;/strong&gt;使得我们可以在不使用锁的情况下，既保证共享变量的线程安全，又避免引入锁可能带来的问题与开销。&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>